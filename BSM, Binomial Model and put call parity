import numpy as np
from scipy.stats import norm

def binomial_model(S, K, T, r, sigma, n):
    dt = T / n
    u = np.exp(sigma * np.sqrt(dt))
    d = 1 / u
    p = (np.exp(r * dt) - d) / (u - d)
    
    # Initialize stock price tree
    stock_prices = np.zeros((n + 1, n + 1))
    stock_prices[0, 0] = S
    
    # Fill stock price tree
    for i in range(1, n + 1):
        stock_prices[i, 0] = stock_prices[i - 1, 0] * u
        for j in range(1, i + 1):
            stock_prices[i, j] = stock_prices[i - 1, j - 1] * d
    
    # Initialize option value tree
    option_values = np.zeros((n + 1, n + 1))
    
    # Calculate option values at maturity
    for j in range(n + 1):
        option_values[n, j] = max(0, stock_prices[n, j] - K)  # Call option payoff
        option_values[n, j] += max(0, K - stock_prices[n, j]) * np.exp(-r * T)  # Put option payoff
    
    # Calculate option values at earlier nodes
    for i in range(n - 1, -1, -1):
        for j in range(i + 1):
            option_values[i, j] = np.exp(-r * dt) * (p * option_values[i + 1, j + 1] + (1 - p) * option_values[i + 1, j])
    
    return option_values[0, 0]

def black_scholes_call(S, K, T, r, sigma):
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    call_price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    return call_price

def black_scholes_put(S, K, T, r, sigma):
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    put_price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)
    return put_price

def put_call_parity_bsm(S, K, T, r, call_price):
    put_price = call_price + K * np.exp(-r * T) - S
    return put_price

def put_call_parity_binomial(S, K, T, r, call_price):
    call_price_bio = binomial_model(S, K, T, r, sigma, 100) 
    put_price = call_price_bio + K * np.exp(-r * T) - S
    return put_price

# Example usage
if __name__ == "__main__":
    S = 100   # Current stock price
    K = 100   # Strike price
    T = 1     # Time to expiration (in years)
    r = 0.05  # Risk-free interest rate
    sigma = 0.2  # Volatility
    n = 100   # Number of steps for the binomial model
    
    # Calculate prices using each model
    binomial_call_price = binomial_model(S, K, T, r, sigma, n)
    bsm_call_price = black_scholes_call(S, K, T, r, sigma)
    bsm_put_price = black_scholes_put(S, K, T, r, sigma)
    
    # Calculate put price using put-call parity
    put_price_from_parity = put_call_parity_bsm(S, K, T, r, bsm_call_price)
    put_price_from_parity2 = put_call_parity_binomial(S, K, T, r, bsm_call_price)
    
    # Print results
    print(f"\nBlack-Scholes Call Option Price: {bsm_call_price:.2f}")
    print(f"Black-Scholes Put Option Price: {bsm_put_price:.2f}")
    print(f"\nBinomial Model Call Option Price: {binomial_call_price:.2f}")
    print(f"\nPut Option Price from Put-Call Parity[BSM]: {put_price_from_parity:.2f}")
    print(f"Put Option Price from Put-Call Parity[Binomial]: {put_price_from_parity2:.2f}\n")
